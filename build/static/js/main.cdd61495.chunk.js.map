{"version":3,"sources":["Components/Charts/Charts.module.css","Components/Cards/Cards.module.css","indexx.js","Components/Countrypicker/Countrypicker.js","Components/Cards/Cards.js","Components/Charts/Charts.js","images/image.png","App.js","reportWebVitals.js","index.js","Indd.module.css","Components/Countrypicker/Countrypicker.module.css"],"names":["module","exports","URL","fetchdata","country","a","changeableUrl","axios","get","data","confirmed","recovered","deaths","lastUpdate","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchh","countries","name","Countrypicker","handleCountryChange","useState","fetchedcountries","setfetchedcountries","useEffect","countryapi","FormControl","className","styles","formControl","NativeSelect","defaultValue","onChange","e","target","value","i","Chards","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","varaint","start","end","duration","separator","Date","toDateString","Chart","setDailyData","fetchAPI","console","log","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","App","state","data1","setState","this","image","src","alt","Charts","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cdd61495.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__2JnAG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__MvGCi\",\"card\":\"Cards_card__1ydRO\",\"infected\":\"Cards_infected__NZ9uE\",\"recovered\":\"Cards_recovered__21knk\",\"deaths\":\"Cards_deaths___3mUR\"};","import axios from 'axios'\r\nconst URL = ' https://covid19.mathdro.id/api'\r\nexport const fetchdata =async (country) => {\r\n  let changeableUrl = URL;\r\n\r\n  if (country) {\r\n    changeableUrl = `${URL}/countries/${country}`;\r\n  }\r\n    try{\r\n   const {data :{confirmed , recovered , deaths , lastUpdate}} =await axios.get(changeableUrl)\r\n   return {confirmed , recovered , deaths , lastUpdate};\r\n    }\r\n    catch (error) {\r\n\r\n    }\r\n\r\n}\r\nexport const fetchDailyData = async () => {\r\n    try{\r\n     const {data} =await axios.get(`${URL}/daily`);\r\n     const modifiedData = data.map((dailyData) => ({\r\n      confirmed: dailyData.confirmed.total,\r\n      deaths:  dailyData.deaths.total,\r\n     date: dailyData.reportDate,\r\n     }));\r\n     return modifiedData\r\n      \r\n       }\r\n      \r\n    \r\n    catch (error){\r\n\r\n\r\n    }\r\n}\r\nexport const fetchh  = async () => {\r\n  try {\r\n    const { data: { countries } } = await axios.get(`${URL}/countries`);\r\n\r\n    return countries.map((country) => country.name);\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};","import React , {useState , useEffect } from 'react'\r\nimport {NativeSelect , FormControl} from '@material-ui/core'\r\nimport NativeSelectInput from '@material-ui/core/NativeSelect/NativeSelectInput'\r\nimport {fetchh} from '../../indexx.js'\r\nimport styles from './Countrypicker.module.css'\r\nconst Countrypicker = ({handleCountryChange})=> {\r\n    const [fetchedcountries , setfetchedcountries] = useState([])\r\n    useEffect(() => {\r\n        const countryapi  = async () => {\r\n            setfetchedcountries(await fetchh())\r\n        }\r\n    countryapi();\r\n\r\n    }, [setfetchedcountries]);\r\n   // console.log(fetchedcountries)\r\n    \r\n    return (\r\n        <FormControl  className={styles.formControl}>\r\n            <NativeSelect defaultValue=\"\" onChange={(e) => handleCountryChange(e.target.value)}>s\r\n                <option value=\"global\">Global</option>\r\n                {fetchedcountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n            </NativeSelect>\r\n        </FormControl>\r\n    )\r\n}\r\nexport default Countrypicker","import React from 'react'\r\nimport {Card, CardContent , Typography , Grid} from '@material-ui/core'\r\nimport Countup from 'react-countup'\r\nimport Countrypicker from '../Countrypicker/Countrypicker';\r\nimport  cx from 'classnames'\r\nimport styles from './Cards.module.css'\r\nconst Chards = ({data:{confirmed , recovered , deaths , lastUpdate}})=> {\r\n    if(!confirmed)\r\n    {\r\n        return 'loading..';\r\n    }\r\n\r\n    \r\n    return (\r\n      <div className={styles.container}> \r\n      <Grid container spacing={3} justify=\"center\">\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.infected)}>\r\n          <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>Infected </Typography>\r\n              <Typography varaint=\"h2\">\r\n              <Countup \r\n              start={0} \r\n              end={confirmed.value} \r\n             duration={2.5}\r\n             separator=\",\"\r\n              />\r\n               </Typography>\r\n              <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString() }</Typography>\r\n              <Typography varaint=\"body2\">Number of ative cases of COVID-19 </Typography>\r\n          </CardContent>\r\n\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.recovered)}>\r\n          <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>Recovered </Typography>\r\n              <Typography varaint=\"h2\">\r\n              <Countup \r\n              start={0} \r\n              end={recovered.value} \r\n             duration={2.5}\r\n             separator=\",\"\r\n              />\r\n               </Typography>\r\n               <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString() }</Typography>\r\n              <Typography varaint=\"body2\">Number of recoveries from COVID-19 </Typography>\r\n          </CardContent>\r\n\r\n        </Grid>\r\n        <Grid item component={Card} xs={12} md={3} className={cx(styles.card , styles.deaths)}>\r\n          <CardContent>\r\n              <Typography color=\"textSecondary\" gutterBottom>Deaths </Typography>\r\n              <Typography varaint=\"h2\">\r\n              <Countup \r\n              start={0} \r\n              end={deaths.value} \r\n             duration={2.5}\r\n             separator=\",\"\r\n              />\r\n               </Typography>\r\n               <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString() }</Typography>\r\n              <Typography varaint=\"body2\">Number of deaths caused by COVID-19 </Typography>\r\n          </CardContent>\r\n\r\n        </Grid>\r\n\r\n\r\n      </Grid>\r\n      </div>\r\n    )\r\n}\r\nexport default Chards","import React , {useState , useEffect} from  'react'\r\nimport {fetchDailyData} from '../../indexx'\r\nimport {Line , Bar} from 'react-chartjs-2'\r\nimport styles from './Charts.module.css'\r\nconst Chart = ({ data: {confirmed , deaths , recovered} , country}) => {\r\n  const [ dailyData ,  setDailyData]  = useState({})\r\n  useEffect(() => {\r\n    const fetchAPI = async () => {\r\n      setDailyData(await fetchDailyData());\r\n    }\r\n    console.log(dailyData)\r\n    fetchAPI();\r\n}, []);\r\nconst barChart = (\r\n  confirmed ? (\r\n    <Bar\r\n      data={{\r\n        labels: ['Infected', 'Recovered', 'Deaths'],\r\n        datasets: [\r\n          {\r\n            label: 'People',\r\n            backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n            data: [confirmed.value, recovered.value, deaths.value],\r\n          },\r\n        ],\r\n      }}\r\n      options={{\r\n        legend: { display: false },\r\n        title: { display: true, text: `Current state in ${country}` },\r\n      }}\r\n    />\r\n  ) : null\r\n);\r\nconst lineChart = (\r\n  dailyData.length\r\n  ? (\r\n  <Line \r\n   \r\n    data= {{\r\n      labels: dailyData.map(({date}) => date),\r\n      datasets: [{\r\n        data: dailyData.map(({confirmed}) => confirmed),\r\n        label: 'Infected' , \r\n        borderColor:'#3333ff' , \r\n        fill: true\r\n\r\n      } , {\r\n        data: dailyData.map(({deaths}) => deaths),\r\n        label: 'Deaths' ,  \r\n        borderColor:'red' , \r\n        backgroundColor: 'rgba(255 , 0 , 0 , 0.5',\r\n        fill: true\r\n      }]\r\n    }}\r\n\r\n  />) : null\r\n)\r\n  return (\r\n    <div className={styles.container}>\r\n      {country ? barChart : lineChart}\r\n\r\n    </div>\r\n  )\r\n}\r\nexport default Chart","export default __webpack_public_path__ + \"static/media/image.9e5d4fc7.png\";","\nimport React, { Component } from 'react'\n\nimport Chards from './Components/Cards/Cards';\nimport Charts from './Components/Charts/Charts';\nimport Countrypicker from './Components/Countrypicker/Countrypicker';\nimport { fetchdata } from './indexx'\nimport styles from './Indd.module.css'\nimport image from './images/image.png';\nexport class App extends Component {\n  state = {\n    data: {},\n    country: ''\n  }\n   \n  async componentDidMount() {\n    const data1 = await  fetchdata();\n   this.setState({data: data1})\n }\n handleCountryChange = async (country) => {\n  const data1 = await  fetchdata(country);\n  this.setState({ data: data1, country: country });\n\n   console.log(data1)\n  \n\n  //this.setState({ data, country: country });\n}\n  render(){\n    const {data, country} = this.state\n  return (\n    <div className=\"App\">\n    \n      <div className={styles.container} >\n      <img className={styles.image} src={image} alt=\"COVID-19\" />\n    <Chards data={data} />\n    <Countrypicker handleCountryChange={this.handleCountryChange} />\n    <Charts data={data}  country={country} />\n    </div>\n    </div>\n  );\n \n}}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Indd_container__7p9-z\",\"image\":\"Indd_image__23wMj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"Countrypicker_formControl__2hMvM\"};"],"sourceRoot":""}